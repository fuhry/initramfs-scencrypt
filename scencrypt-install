#!/bin/bash

build() {
    local mod

    add_module dm-crypt
    if [[ $CRYPTO_MODULES ]]; then
        for mod in $CRYPTO_MODULES; do
            add_module "$mod"
        done
    else
        add_all_modules '/crypto/'
    fi

    if [ -d $BUILDROOT/etc/initcpio/gpg ]; then
        echo "WARNING! /etc/initcpio/gpg exists in initramfs buildroot. Huh?"
        rm -rf "$BUILDROOT/etc/initcpio/gpg"
    fi

    mkdir -p $BUILDROOT/etc/initcpio/gpg
    chmod 0700 $BUILDROOT/etc/initcpio/gpg
    echo "pinentry-program /usr/bin/pinentry" > $BUILDROOT/etc/initcpio/gpg/gpg-agent.conf

    add_binary "cryptsetup"
    add_binary "dmsetup"
    add_binary "gpg"
    add_binary "gpgconf"
    add_binary "gpg-agent"
    add_binary "pinentry-tty"
    add_binary "gpg-connect-agent"
    add_binary "/usr/lib/gnupg/scdaemon"
    add_binary "/usr/bin/systemd-escape"
    add_binary "/usr/bin/systemd-ask-password"
    add_file "/usr/lib/udev/rules.d/10-dm.rules"
    add_file "/usr/lib/udev/rules.d/13-dm-disk.rules"
    add_file "/usr/lib/udev/rules.d/95-dm-notify.rules"
    add_file "/usr/lib/initcpio/udev/11-dm-initramfs.rules" "/usr/lib/udev/rules.d/11-dm-initramfs.rules"
    add_file "/usr/lib/initcpio/udev/95-smartcard.rules" "/usr/lib/udev/rules.d/95-smartcard.rules"

    install -d -oroot -groot -m0755 "$BUILDROOT/usr/lib/systemd"
    add_file "/usr/lib/systemd/systemd-initramfs-gpg-init"
    add_file "/usr/lib/systemd/systemd-gpg-decrypt"

    install -d -oroot -groot -m0755 "$BUILDROOT/usr/lib/systemd/system"
    add_file "/usr/lib/systemd/system/systemd-initramfs-gpg-init.service"
    add_file "/usr/lib/systemd/system/systemd-gpg-decrypt@.service"
    add_file "/usr/lib/systemd/system/systemd-cryptsetup-pgp-keyfile@.service"

    install -d -oroot -groot -m0755 "$BUILDROOT/usr/lib/systemd/system-generators"
    add_file "/usr/lib/systemd/system-generators/cryptsetup-gpg-dropin-generator"

    if [ -d /etc/initcpio/gpg/public-keys.d ]; then
        install -d -oroot -groot -m0700 "$BUILDROOT/etc/initcpio/gpg"
        add_full_dir "/etc/initcpio/gpg/public-keys.d"
    fi

    # cryptsetup calls pthread_create(), which dlopen()s libgcc_s.so.1
    add_binary "/usr/lib/libgcc_s.so.1"

    # add_file "/etc/crypttab" # file is added later line by line

    ln -s "pinentry-tty" "$BUILDROOT/usr/bin/pinentry"

    # create a tmp dir
    mkdir -p $BUILDROOT/tmp

    # Iterate over entries in /etc/crypttab looking for regular keyfiles
    sed -re 's;#.*$;;g' -e '/^[ \t]*$/ d' /etc/crypttab > "$BUILDROOT/tmp/crypttab"
    while read line; do
        # First, try to determine the password file using the new pgp-keyfile= option
        IFS=$' \t' read mapped_name device password_file opts <<< "$line"
        f=
        for opt in ${opts//,/ }; do
            case "$opt" in
                pgp-keyfile=*)
                    f=${opt:12} ;;
                *)
                    : ;;
            esac
        done

        if [ -z "$f" -a "${password_file:0:1}" = "/" -a -r "${password_file}" ]; then
            # if we're using the legacy third column, the file path must end in .gpg
            if [[ "${password_file##*.}" =~ ^(gpg|pgp|asc) ]]; then
                f="$password_file"
            fi
        fi

        if [ -n "$f" ]; then
            # Determine the keyid used to encrypt this keyfile
            keyid=$(gpg -q --list-packets --list-only $f 2>&1 | grep -Eo '(ID|keyid) [0-9A-F]{16}' | awk '{print $2;}' | tail -1)

            # If we got a keyid, export that key. Recent versions of GPG will fail to
            # export secret key stubs, so if we don't get any output, export just the
            # public key. Note that this means decryption will fail if you add only the
            # public key to root's keyring.
            if [ -n "$keyid" ]; then
                keyfile="$BUILDROOT/tmp/$keyid.asc"
                gpg --homedir /root/.gnupg --export-options export-minimal --export-secret-keys -a 0x${keyid} 2>/dev/null > $keyfile
                if ! grep -Eq '.*' $keyfile; then
                    gpg --homedir /root/.gnupg --export-options export-minimal --export -a 0x${keyid} > $keyfile
                fi
                gpg --homedir "$BUILDROOT/etc/initcpio/gpg" --import $keyfile
            fi
            add_file "$f"
        fi
    done < "$BUILDROOT/tmp/crypttab"

    # Remove duplicate lines (first sort and then use uniq)
    sort "$BUILDROOT/tmp/crypttab" | uniq >  "$BUILDROOT/etc/crypttab"
    # Remove temporary crypttab
    rm -f "$BUILDROOT/tmp/crypttab"

    add_runscript
}

help() {
    cat <<HELPEOF
This hook adds support for the use of smartcards conforming to the OpenPGP
smartcard standard to Arch's initramfs. Encrypted objects listed in
/etc/crypttab will be decrypted with GnuPG during the initramfs stage if the
keyfile path ends in ".gpg". If GnuPG fails to decrypt the key file, the hook
will prompt for the passphrase instead.

Note that non-LUKS disks are unsupported at this time.

HELPEOF
}

# vim: set ft=sh ts=4 sw=4 et:
